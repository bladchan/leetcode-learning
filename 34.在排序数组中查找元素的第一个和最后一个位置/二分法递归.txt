class Solution {
private:
    vector<int> binarySearch(vector<int>& nums, int left, int right, int target){
        if(left == right){
            if(target == nums[left]){
                return vector<int>{left,left};
            }else{
                return vector<int>{-1,-1};
            }
        }
        vector<int> ret;
        int mid = (left + right) >> 1;
        if(target<nums[mid]){
            ret = binarySearch(nums, left, mid, target);
        }else if(target>nums[mid]){
            ret = binarySearch(nums, mid+1, right, target);
        }else{
            vector<int> ret_left = binarySearch(nums, left, mid, target);
            vector<int> ret_right = binarySearch(nums, mid+1, right, target);
            ret.push_back(ret_left[0]!=-1?ret_left[0]:mid);
            ret.push_back(ret_right[0]!=-1?ret_right[1]:mid);
        }
        return ret;
    }
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        if(nums.size() == 0){
            return vector<int>{-1, -1};
        }
        return binarySearch(nums,0,nums.size()-1,target);
    }
};