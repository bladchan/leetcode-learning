class Solution {
private:
    int mergeSort(vector<int> &nums,int left, int right){
        // 单个元素
        if(left == right){
            return 0;
        }
        int mid = (left + right) / 2;
        // 折半
        int nleft = mergeSort(nums, left, mid);
        int nright = mergeSort(nums, mid+1, right);
        int ret = nleft + nright;
        // 统计
        int i,j;
        for(i=left;i<=mid;i++){
            /*for(j=mid+1;j<=right;j++){
                if((long)nums[i] <= 2*(long)nums[j]){
                    ret += j-mid-1;
                    break;
                }
                if(j==right){
                    ret += j-mid;
                }
            }*/
            while(j<=right && (long)nums[i] > 2*(long)nums[j]) j++;
            ret += j-mid-1;
        }
        // 归并
        vector<int> temp(right - left + 1);
        int p1=left;
        int p2=mid + 1;
        int p=0;
        while(p1 <= mid || p2 <= right){
            if(p1 > mid){
                temp[p++] = nums[p2++];
            }else if(p2 > right){
                temp[p++] = nums[p1++];
            }else{
                // 比较两个数大小并取小值在前
                if(nums[p1]>nums[p2]){
                    temp[p++] = nums[p2++];
                }else{
                    temp[p++] = nums[p1++];
                }
            }
        }
        for(int i=0;i<temp.size();i++){
            nums[left+i] = temp[i];
        }
        return ret;
    }
public:
    int reversePairs(vector<int>& nums) {
        if(nums.size() == 0)
            return 0;
        return mergeSort(nums,0,nums.size()-1);
    }
};