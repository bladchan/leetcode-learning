class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int len1 = nums1.size();
        int len2 = nums2.size();
        if(len1 > len2)  //保持nums1是元素个数最小的
            return findMedianSortedArrays(nums2,nums1);
        int k = (len1 + len2 + 1)/2; //寻找第k小数
        if(len1 == 0) return (len1+len2)%2 == 0 ? (nums2[k-1]+nums2[k])/2.0 : nums2[k-1];
        int start1=0,start2=0,end1=len1-1,end2=len2-1;
        while(k / 2 != 0){
            int len = k / 2;
            if(len1 - start1 >= len){
                end1 = start1 + len - 1;
                end2 = start2 + len - 1;
                start1 = nums1[end1] >= nums2[end2] ? start1 : end1 + 1;
                start2 = nums1[end1] >= nums2[end2] ? end2 + 1 : start2;
                k -= len;
            }else{
                if(start1 >= len1){ //数组一已经完全遍历
                    return (len1+len2)%2 == 0 ? (nums2[start2+k]+nums2[start2+k-1])/2.0 : nums2[start2 + k-1];
                }else{              //数组一还未完全遍历
                    end1 = len1 - 1;
                    end2 = start2 + (len * 2) - (len1 - start1) - 1;
                    k = nums1[end1] >= nums2[end2] ? k - (len*2)+(len1 - start1) : k - (end1 - start1 + 1);
                    start1 = nums1[end1] >= nums2[end2] ? start1 : end1 + 1; //数组遍历完
                    start2 = nums1[end1] >= nums2[end2] ? end2 + 1 : start2;
                }
            }
        }
        if(start1 >= len1){ //数组一已经完全遍历
            return (len1 + len2)%2==0 ? (nums2[start2+k]+nums2[start2+k-1])/2.0 : nums2[start2+k-1]; 
        }
        if((len1 + len2) % 2 != 0) return min(nums1[start1], nums2[start2]);
        else{
            int left,right;
            if(nums1[start1] > nums2[start2]){
                left = nums2[start2++];
                right = start2 < len2 ? min(nums1[start1],nums2[start2]) : nums1[start1];
            }
            else{
                left = nums1[start1++];
                right = start1 < len1 ? min(nums1[start1],nums2[start2]) : nums2[start2];
            }
            return (left+right)/2.0;
        }
    }
};